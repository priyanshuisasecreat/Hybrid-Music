"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const info = __importStar(require("./info"));
const util = __importStar(require("./util"));
const sig = __importStar(require("./sig"));
const axios_1 = __importDefault(require("axios"));
const m3u8stream_1 = __importDefault(require("m3u8stream"));
const parse_time_1 = __importDefault(require("m3u8stream/dist/parse-time"));
const client_1 = __importDefault(require("./client"));
const ytdl = (link, options) => {
    const stream = createStream(options);
    exports.getInfo(link, options)
        .then((info) => {
        stream.emit('info', info);
        return downloadFromInfoCallback(stream, info, options);
    })
        .catch((e) => stream.emit('error', e));
    return stream;
};
exports.ytdl = ytdl;
const createStream = (options) => {
    var _a, _b;
    const stream = new stream_1.PassThrough({
        highWaterMark: (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.highWaterMark, (_b !== null && _b !== void 0 ? _b : null)),
    });
    stream.destroy = () => {
        stream._isDestroyed = true;
    };
    return stream;
};
/**
 * Chooses a format to download.
 *
 * @param {stream.Readable} stream
 * @param {Object} info
 * @param {Object} options
 */
const downloadFromInfoCallback = (stream, info, options) => __awaiter(void 0, void 0, void 0, function* () {
    options = options || {};
    const format = util.chooseFormat(info.formats, options);
    if (format instanceof Error) {
        // The caller expects this function to be async.
        setImmediate(() => {
            stream.emit('error', format);
        });
        return;
    }
    stream.emit('info', { info, format });
    if (stream._isDestroyed) {
        return;
    }
    let contentLength = 0;
    let downloaded = 0;
    const ondata = (chunk) => {
        downloaded += chunk.length;
        stream.emit('progress', {
            chunkLength: chunk.length,
            downloaded,
            total: contentLength,
        });
    };
    let reqType;
    let req;
    if (format.isHLS || format.isDashMPD) {
        reqType = 'miniget';
        req = m3u8stream_1.default(format.url, {
            chunkReadahead: +info.live_chunk_readahead,
            begin: (options.begin || format.live && Date.now()),
            liveBuffer: options.liveBuffer,
            requestOptions: (options.requestOptions),
            parser: format.isDashMPD ? 'dash-mpd' : 'm3u8',
            id: format.itag,
        });
        req.on('progress', (segment, totalSegments) => {
            stream.emit('progress', {
                chunkLength: segment.size,
                downloaded: segment.num,
                total: totalSegments,
            });
        });
    }
    else {
        if (options.begin) {
            format.url += '&begin=' + parse_time_1.default.humanStr(options.begin);
        }
        let requestOptions = Object.assign({}, options.requestOptions);
        if (options.range && (options.range.start || options.range.end)) {
            requestOptions.headers = Object.assign({}, requestOptions.headers, {
                Range: `bytes=${options.range.start || '0'}-${options.range.end || ''}`,
            });
        }
        reqType = 'axios';
        const source = axios_1.default.CancelToken.source();
        req = yield client_1.default.get(format.url, Object.assign(Object.assign({}, requestOptions), { headers: Object.assign({ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36', Referer: `https://www.youtube.com/watch/${info.video_id}` }, requestOptions.headers), responseType: 'stream', cancelToken: source.token }));
        stream.emit('response', req);
        req.abort = () => source.cancel();
        if (stream._isDestroyed) {
            return;
        }
        if (!contentLength) {
            contentLength = Number(req.headers['content-length']);
        }
        req.data.on('data', ondata);
    }
    stream.destroy = () => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        stream._isDestroyed = true;
        if (req.abort)
            req.abort();
        (_b = (_a = req).end) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_d = (_c = req).removeListener) === null || _d === void 0 ? void 0 : _d.call(_c, 'data', ondata);
        if (reqType === 'miniget') {
            (_f = (_e = req).unpipe) === null || _f === void 0 ? void 0 : _f.call(_e);
        }
        else {
            (_h = (_g = req.data).unpipe) === null || _h === void 0 ? void 0 : _h.call(_g);
        }
    };
    if (reqType === 'miniget') {
        // Forward events from the request to the stream.
        [
            'abort', 'request', 'response', 'error', 'retry', 'reconnect',
        ].forEach((event) => {
            var _a, _b;
            (_b = (_a = req).prependListener) === null || _b === void 0 ? void 0 : _b.call(_a, event, (arg) => {
                stream.emit(event, arg);
            });
        });
        req.pipe(stream);
    }
    else {
        req.data.pipe(stream);
    }
});
exports.downloadFromInfo = (info, options) => {
    const stream = createStream(options);
    if (!info.full) {
        throw new Error('Cannot use `ytdl.downloadFromInfo()` when called ' +
            'with info from `ytdl.getBasicInfo()`');
    }
    downloadFromInfoCallback(stream, info, options);
    return stream;
};
exports.default = ytdl;
exports.getBasicInfo = info.getBasicInfo;
exports.getInfo = info.getFullInfo;
exports.chooseFormat = util.chooseFormat;
exports.filterFormats = util.filterFormats;
exports.validateID = util.validateID;
exports.validateURL = util.validateURL;
exports.getURLVideoID = util.getURLVideoID;
exports.getVideoID = util.getVideoID;
exports.cache = Object.freeze({
    sig: sig.cache,
    info: info.cache,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsbUNBQStDO0FBQy9DLDZDQUErQjtBQUMvQiw2Q0FBK0I7QUFDL0IsMkNBQTZCO0FBQzdCLGtEQUE2QztBQUU3Qyw0REFBb0M7QUFDcEMsNEVBQW1EO0FBRW5ELHNEQUErQjtBQTBCL0IsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFZLEVBQUUsT0FBeUIsRUFBYyxFQUFFO0lBQ25FLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVyQyxlQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztTQUNuQixJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTFCLE9BQU8sd0JBQXdCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFekMsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBOEpBLG9CQUFJO0FBNUpOLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBd0IsRUFBRSxFQUFFOztJQUNoRCxNQUFNLE1BQU0sR0FBRyxJQUFJLG9CQUFXLENBQUM7UUFDN0IsYUFBYSxjQUFFLE9BQU8sMENBQUUsYUFBYSx1Q0FBSSxJQUFJLEVBQUE7S0FDOUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFDcEIsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0lBRUYsT0FBTyxN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