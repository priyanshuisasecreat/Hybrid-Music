"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cache_1 = require("./cache");
const urllib = __importStar(require("url"));
const qs = __importStar(require("qs"));
const sax_1 = __importDefault(require("sax"));
const util = __importStar(require("./util"));
const extras = __importStar(require("./info-extras"));
const sig = __importStar(require("./sig"));
const lru_cache_1 = __importDefault(require("lru-cache"));
const client_1 = __importDefault(require("./client"));
const VIDEO_URL = 'https://www.youtube.com/watch?v=';
const EMBED_URL = 'https://www.youtube.com/embed/';
const VIDEO_EURL = 'https://youtube.googleapis.com/v/';
const INFO_HOST = 'www.youtube.com';
const INFO_PATH = '/get_video_info';
/**
 * Gets info from a video without getting additional formats.
 */
exports._getBasicInfo = (id, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    // Try getting config from the video page first.
    const params = 'hl=' + (_a = options.lang, (_a !== null && _a !== void 0 ? _a : 'en'));
    let url = VIDEO_URL + id + '&' + params +
        '&bpctr=' + Math.ceil(Date.now() / 1000);
    // Remove header from watch page request.
    // Otherwise, it'll use a different framework for rendering content.
    const reqOptions = Object.assign({}, (_b = options.requestOptions, (_b !== null && _b !== void 0 ? _b : {})));
    reqOptions.headers = Object.assign({}, reqOptions.headers, {
        'User-Agent': '',
    });
    const resp = yield client_1.default.get(url, reqOptions);
    const body = resp.data;
    // Check if there are any errors with this video page.
    const unavailableMsg = util.between(body, '<div id="player-unavailable"', '>');
    if (unavailableMsg &&
        !/\bhid\b/.test(util.between(unavailableMsg, 'class="', '"'))) {
        // Ignore error about age restriction.
        if (!body.includes('<div id="watch7-player-age-gate-content"')) {
            throw new Error(util.between(body, '<h1 id="unavailable-message" class="message">', '</h1>').trim());
        }
    }
    // Parse out additional metadata from this page.
    const additional = {
        // Get the author/uploader.
        author: extras.getAuthor(body),
        // Get the day the vid was published.
        published: extras.getPublished(body),
        // Get description.
        description: extras.getVideoDescription(body),
        // Get media info.
        media: extras.getVideoMedia(body),
        // Get related videos.
        related_videos: extras.getRelatedVideos(body),
        // Get likes.
        likes: extras.getLikes(body),
        // Get dislikes.
        dislikes: extras.getDislikes(body),
    };
    const jsonStr = util.between(body, 'ytplayer.config = ', '</script>');
    let config;
    if (jsonStr) {
        config = jsonStr.slice(0, jsonStr.lastIndexOf(';ytplayer.load'));
        return gotConfig(id, options, additional, config, false);
    }
    // If the video page doesn't work, maybe because it has mature content.
    // and requires an account logged in to view, try the embed page.
    url = EMBED_URL + id + '?' + params;
    const resp2 = yield client_1.default.get(url, options.requestOptions);
    config = util.between(resp2.data, 't.setConfig({\'PLAYER_CONFIG\': ', /\}(,'|\}\);)/);
    return gotConfig(id, options, additional, config, true);
});
const parseFormats = (info) => {
    let formats = [];
    if (info.player_response.streamingData) {
        if (info.player_response.streamingData.formats) {
            formats = formats.concat(info.player_response.streamingData.formats);
        }
        if (info.player_response.streamingData.adaptiveFormats) {
            formats = formats.concat(info.player_response.streamingData.adaptiveFormats);
        }
    }
    return formats;
};
const gotConfig = (id, options, additional, config, fromEmbed) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    if (!config) {
        throw new Error('Could not find player config');
    }
    try {
        config = JSON.parse(config + (fromEmbed ? '}' : ''));
    }
    catch (err) {
        throw new Error('Error parsing config: ' + err.message);
    }
    const url = urllib.format({
        protocol: 'https',
        host: INFO_HOST,
        pathname: INFO_PATH,
        query: {
            video_id: id,
            eurl: VIDEO_EURL + id,
            ps: 'default',
            gl: 'US',
            hl: (options.lang || 'en'),
            sts: config.sts,
        },
    });
    const resp = yield client_1.default.get(url, options.requestOptions);
    const body = resp.data;
    const info = qs.parse(body);
    const player_response = config.args.player_response || info.player_response;
    if (info.status === 'fail') {
        throw new Error(`Code ${info.errorcode}: ${util.stripHTML(info.reason)}`);
    }
    else {
        try {
            info.player_response = JSON.parse(player_response);
        }
        catch (err) {
            throw new Error('Error parsing `player_response`: ' + err.message);
        }
    }
    const playability = info.player_response.playabilityStatus;
    if (playability && playability.status === 'UNPLAYABLE') {
        throw new Error(util.stripHTML(playability.reason));
    }
    return Object.assign(Object.assign(Object.assign({}, info), additional), { formats: parseFormats(info), video_id: id, 
        // Give the standard link to the video.
        video_url: VIDEO_URL + id, 
        // Copy over a few props from `player_response.videoDetails`
        // for backwards compatibility.
        title: info.player_response.videoDetails && info.player_response.videoDetails.title, length_seconds: info.player_response.videoDetails && info.player_response.videoDetails.lengthSeconds, age_restricted: fromEmbed, html5player: (_c = config.assets) === null || _c === void 0 ? void 0 : _c.js });
});
/**
 * Gets info from a video additional formats and deciphered URLs.
 */
exports._getFullInfo = (id, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const info = yield exports.getBasicInfo(id, options);
    const hasManifest = info.player_response && info.player_response.streamingData && (!!info.player_response.streamingData.dashManifestUrl ||
        !!info.player_response.streamingData.hlsManifestUrl);
    if (info.formats.length || hasManifest) {
        const html5playerfile = urllib.resolve(VIDEO_URL, info.html5player);
        const tokens = yield sig.getTokens(html5playerfile, options);
        sig.decipherFormats(info.formats, tokens, options.debug);
        const promises = [];
        if (hasManifest && info.player_response.streamingData.dashManifestUrl) {
            let url = info.player_response.streamingData.dashManifestUrl;
            promises.push(getDashManifest(url, options));
        }
        if (hasManifest && info.player_response.streamingData.hlsManifestUrl) {
            let url = info.player_response.streamingData.hlsManifestUrl;
            promises.push(getM3U8(url, options));
        }
        const results = yield Promise.all(promises);
        if (results[0]) {
            mergeFormats(info, results[0]);
        }
        if (results[1]) {
            mergeFormats(info, results[1]);
        }
        info.formats = info.formats.map(util.addFormatMeta).sort(util.sortFormats);
        info.full = true;
        return info;
    }
    throw new Error('This video is unavailable');
});
/**
 * Merges formats from DASH or M3U8 with formats from video info page.
 *
 * @param {Object} info
 * @param {Object} formatsMap
 */
const mergeFormats = (info, formatsMap) => {
    info.formats.forEach((f) => {
        formatsMap[f.itag] = formatsMap[f.itag] || f;
    });
    info.formats = Object.values(formatsMap);
};
/**
 * Gets additional DASH formats.
 *
 * @param {string} url
 * @param {Object} options
 * @param {Function(!Error, Array.<Object>)} callback
 */
const getDashManifest = (url, options) => __awaiter(void 0, void 0, void 0, function* () {
    let formats = {};
    const parser = sax_1.default.parser(false);
    return new Promise((resolve, reject) => {
        parser.onerror = reject;
        parser.onopentag = (node) => {
            if (node.name === 'REPRESENTATION') {
                const itag = node.attributes.ID;
                formats[itag] = { itag, url };
            }
        };
        parser.onend = () => resolve(formats);
        client_1.default.get(urllib.resolve(VIDEO_URL, url), options.requestOptions)
            .then((resp) => {
            parser.write(resp.data);
            parser.close();
        })
            .catch(reject);
    });
});
/**
 * Gets additional formats.
 *
 * @param {string} url
 * @param {Object} options
 * @param {Function(!Error, Array.<Object>)} callback
 */
const getM3U8 = (url, options) => __awaiter(void 0, void 0, void 0, function* () {
    url = urllib.resolve(VIDEO_URL, url);
    const resp = yield client_1.default.get(url, options.requestOptions);
    const body = resp.data;
    return body
        .split('\n')
        .filter((line) => /https?:\/\//.test(line))
        .reduce((formats, line) => {
        const itag = line.match(/\/itag\/(\d+)\//)[1];
        formats[itag] = { itag, url: line };
        return formats;
    }, {});
});
// Cached for getting basic/full info.
exports.cache = new lru_cache_1.default({
    max: 10,
    maxAge: 600,
});
// Cache get info functions.
// In case a user wants to get a video's info before downloading.
const generateKeyFn = (fnName) => ([id, options]) => {
    var _a, _b;
    return `${fnName}-${id}-${_b = (_a = options) === null || _a === void 0 ? void 0 : _a.lang, (_b !== null && _b !== void 0 ? _b : 'en')}`;
};
const remapArgs = ([link, options]) => {
    const id = util.getVideoID(link);
    return [id, (options !== null && options !== void 0 ? options : {})];
};
exports.getBasicInfo = cache_1.applyCache(exports.cache, exports._getBasicInfo, generateKeyFn('getBasicInfo'), remapArgs);
exports.getFullInfo = cache_1.applyCache(exports.cache, exports._getFullInfo, generateKeyFn('getFullInfo'), remapArgs);
// Export a few helpers.
exports.validateID = util.validateID;
exports.validateURL = util.validateURL;
exports.getURLVideoID = util.getURLVideoID;
exports.getVideoID = util.getVideoID;
//# sourceMappingURL=data:application/json;base64,