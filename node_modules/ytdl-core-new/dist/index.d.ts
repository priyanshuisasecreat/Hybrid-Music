/// <reference types="lru-cache" />
import { PassThrough, Readable } from 'stream';
import { AxiosResponse } from 'axios';
import { DownloadOptions, VideoInfo, VideoFormat } from './models';
declare module 'stream' {
    interface PassThrough {
        _isDestroyed?: boolean;
    }
    interface Readable {
        _isDestroyed?: boolean;
    }
}
interface YtdlStreamEventObj {
    error: Error;
    close: void;
    abort: void;
    response: AxiosResponse | null;
    progress: {
        chunkLength: number;
        downloaded: number;
        total: number;
    };
    info: {
        info: VideoInfo;
        format: VideoFormat;
    };
}
interface YtdlStream extends Readable {
    on<K extends keyof YtdlStreamEventObj>(eventName: K, handler: (e: YtdlStreamEventObj[K], ...args: any[]) => void): this;
    once<K extends keyof YtdlStreamEventObj>(eventName: K, handler: (e: YtdlStreamEventObj[K], ...args: any[]) => void): this;
}
declare const ytdl: (link: string, options?: DownloadOptions) => YtdlStream;
export declare const downloadFromInfo: (info: VideoInfo, options: DownloadOptions) => PassThrough;
export default ytdl;
export declare const getBasicInfo: (id: string, options?: DownloadOptions) => Promise<VideoInfo>;
export declare const getInfo: (id: string, options?: DownloadOptions) => Promise<VideoInfo>;
export declare const chooseFormat: (formats: any, options: any) => any;
export declare const filterFormats: (formats: any, filter: any) => any;
export declare const validateID: (id: string) => boolean;
export declare const validateURL: (string: string) => boolean;
export declare const getURLVideoID: (link: string) => string | Error;
export declare const getVideoID: (str: string) => string | Error;
export declare const cache: Readonly<{
    sig: Map<any, any>;
    info: import("lru-cache")<unknown, unknown>;
}>;
export { ytdl, };
